import Joi from 'joi';
import * as dotenv from 'dotenv';

if (process.env.NODE_ENV && process.env.NODE_ENV === 'test') {
    dotenv.config({ path: process.cwd() + '/.env.test' });
} else {
    dotenv.config();
}

const envValidation = Joi.object()
    .keys({
        NODE_ENV: Joi.string().trim().valid('local', 'development', 'production', 'test').required(),
        PORT: Joi.number().default(3000),
        PG_DB_PORT: Joi.number().default(3000),
        PG_DB_HOST: Joi.string().trim().required(),
        PG_DB_USER: Joi.string().trim().required(),
        PG_DB_PASSWORD: Joi.string().trim().required(),
        PG_DB_NAME: Joi.string().trim().required(),
        MONGO_DB_CONNECTION_URL: Joi.string().trim().required(),
        MONGO_DB_NAME: Joi.string().trim(),
        JWT_SECRET: Joi.string().trim().required().description('JWT secret key'),
        JWT_ACCESS_EXPIRATION_MINUTES: Joi.number().default(30).description('minutes after which access tokens expire'),
        JWT_REFRESH_EXPIRATION_DAYS: Joi.number().default(30).description('days after which refresh tokens expire'),
        JWT_RESET_PASSWORD_EXPIRATION_MINUTES: Joi.number().default(10).description('minutes after which reset password token expires'),
        JWT_VERIFY_EMAIL_EXPIRATION_MINUTES: Joi.number().default(10).description('minutes after which verify email token expires'),
        LOG_FOLDER: Joi.string().required(),
        LOG_FILE: Joi.string().required(),
        LOG_LEVEL: Joi.string().required(),
        GOOGLE_CLIENT_ID: Joi.string().required(),
        GOOGLE_CLIENT_SECRET: Joi.string().required(),
        META_CLIENT_ID: Joi.string().required(),
        META_CLIENT_SECRET: Joi.string().required(),
        APPLE_CLIENT_ID: Joi.string().required(),
        APPLE_TEAM_ID: Joi.string().required(),
        APPLE_KEY_ID: Joi.string().required(),
        APPLE_PRIVATE_KEY: Joi.string().required(),
        SERVER_URL: Joi.string().required(),
        WEB_SERVER_URL: Joi.string().required(),
        PERENT_INSTITUTE_VERIFICATION_ROUTE: Joi.string().required(),
        TEACHER_INSTITUTE_VERIFICATION_ROUTE: Joi.string().required(),
        STUDENT_UPSERT_API: Joi.string().required(),
        AWS_BUCKET_NAME: Joi.string().required(),
        AWS_ACCESS_KEY_ID: Joi.string().required(),
        AWS_SECRET_ACCESS_KEY: Joi.string().required(),
        AWS_REGION: Joi.string().required(),
        PDF_MICRO_SERVICE_API_URL: Joi.string().required(),
        SMTP_SERVER: Joi.string().required(),
        SMTP_EMAIL: Joi.string().required(),
        SMTP_PORT: Joi.number().required(),
        SMTP_USER: Joi.string().required(),
        SMTP_PASS: Joi.string().required(),
        VERIFICATION_TOKEN_EXPIRATION_DAY: Joi.number().required(),
        // TEACHER_SCHOOL_VERIFICATION_ROUTE: Joi.string().required(),
        FIREBASE_PROJECT_ID: Joi.string().trim().required(),
        FIREBASE_CLIENT_EMAIL: Joi.string().trim().required(),
        FIREBASE_PRIVATE_KEY: Joi.string().trim().required(),
        RAZORPAY_KEY_ID: Joi.string().optional(),
        RAZORPAY_SECRET: Joi.string().optional(),
        PHONEPE_CLIENT_ID: Joi.string().optional(),
        PHONEPE_SECRET: Joi.string().optional(),
        PHONEPE_CLIENT_VERSION: Joi.string().optional(),
        PHONEPE_USERNAME: Joi.string().optional(),
        PHONEPE_PASSWORD: Joi.string().optional(),
        GOOGLEPAY_API_KEY: Joi.string().optional(),
        GOOGLEPAY_ENDPOINT: Joi.string().optional(),
    })
    .unknown();

const { value: envVar, error } = envValidation.prefs({ errors: { label: 'key' } }).validate(process.env);

if (error) {
    throw new Error(`Config validation error: ${error.message}`);
}

export const ENV_VARIABLE = {
    NODE_ENV: envVar.NODE_ENV,
    PORT: envVar.PORT,
    PG_DB_HOST: envVar.PG_DB_HOST,
    PG_DB_PORT: envVar.PG_DB_PORT,
    PG_DB_USER: envVar.PG_DB_USER,
    PG_DB_PASSWORD: envVar.PG_DB_PASSWORD,
    PG_DB_NAME: envVar.PG_DB_NAME,
    MONGO_DB_CONNECTION_URL: envVar.MONGO_DB_CONNECTION_URL,
    MONGO_DB_NAME: envVar.MONGO_DB_NAME,
    JWT_SECRET: envVar.JWT_SECRET,
    JWT_ACCESS_EXPIRATION_MINUTES: envVar.JWT_ACCESS_EXPIRATION_MINUTES,
    JWT_REFRESH_EXPIRATION_DAYS: envVar.JWT_REFRESH_EXPIRATION_DAYS,
    JWT_RESET_PASSWORD_EXPIRATION_MINUTES: envVar.JWT_RESET_PASSWORD_EXPIRATION_MINUTES,
    JWT_VERIFY_EMAIL_EXPIRATION_MINUTES: envVar.JWT_VERIFY_EMAIL_EXPIRATION_MINUTES,
    LOG_FOLDER: envVar.LOG_FOLDER,
    LOG_FILE: envVar.LOG_FILE,
    LOG_LEVEL: envVar.LOG_LEVEL,
    GOOGLE_CLIENT_ID: envVar.GOOGLE_CLIENT_ID,
    GOOGLE_CLIENT_SECRET: envVar.GOOGLE_CLIENT_SECRET,
    META_CLIENT_ID: envVar.META_CLIENT_ID,
    META_CLIENT_SECRET: envVar.META_CLIENT_SECRET,
    APPLE_CLIENT_ID: envVar.APPLE_CLIENT_ID,
    APPLE_TEAM_ID: envVar.APPLE_TEAM_ID,
    APPLE_KEY_ID: envVar.APPLE_KEY_ID,
    APPLE_PRIVATE_KEY: envVar.APPLE_PRIVATE_KEY,
    SERVER_URL: envVar.SERVER_URL,
    WEB_SERVER_URL: envVar.WEB_SERVER_URL,
    PERENT_INSTITUTE_VERIFICATION_ROUTE: envVar.PERENT_INSTITUTE_VERIFICATION_ROUTE,
    TEACHER_INSTITUTE_VERIFICATION_ROUTE: envVar.TEACHER_INSTITUTE_VERIFICATION_ROUTE,
    STUDENT_UPSERT_API: envVar.STUDENT_UPSERT_API,
    AWS_BUCKET_NAME: envVar.AWS_BUCKET_NAME,
    AWS_ACCESS_KEY_ID: envVar.AWS_ACCESS_KEY_ID,
    AWS_SECRET_ACCESS_KEY: envVar.AWS_SECRET_ACCESS_KEY,
    AWS_REGION: envVar.AWS_REGION,
    PDF_MICRO_SERVICE_API_URL: envVar.PDF_MICRO_SERVICE_API_URL,
    SMTP_SERVER: envVar.SMTP_SERVER,
    SMTP_EMAIL: envVar.SMTP_EMAIL,
    SMTP_PORT: envVar.SMTP_PORT,
    SMTP_USER: envVar.SMTP_USER,
    SMTP_PASS: envVar.SMTP_PASS,
    VERIFICATION_TOKEN_EXPIRATION_DAY: envVar.VERIFICATION_TOKEN_EXPIRATION_DAY,
    // TEACHER_SCHOOL_VERIFICATION_ROUTE: envVar.TEACHER_SCHOOL_VERIFICATION_ROUTE,
    FIREBASE_PROJECT_ID: envVar.FIREBASE_PROJECT_ID,
    FIREBASE_CLIENT_EMAIL: envVar.FIREBASE_CLIENT_EMAIL,
    FIREBASE_PRIVATE_KEY: envVar.FIREBASE_PRIVATE_KEY,
    RAZORPAY: {
        KEY_ID: envVar.RAZORPAY_KEY_ID,
        SECRET: envVar.RAZORPAY_SECRET,
    },
    PHONEPE: {
        CLIENT_ID: envVar.PHONEPE_CLIENT_ID,
        SECRET: envVar.PHONEPE_SECRET,
        CLIENT_VERSION: envVar.PHONEPE_CLIENT_VERSION,
        USERNAME: envVar.PHONEPE_USERNAME,
        PASSWORD: envVar.PHONEPE_PASSWORD,
    },
    GOOGLEPAY: {
        API_KEY: envVar.GOOGLEPAY_API_KEY,
        ENDPOINT: envVar.GOOGLEPAY_ENDPOINT,
    },
};
